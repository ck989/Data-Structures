/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAX_SIZE 101

int top = -1;


int A[MAX_SIZE];



void Push(char x)
{
    A[++top] = x;
}


void Pop()
{    
    if(top == -1)
    {
        printf("the stack is empty");
        return;   
    }
    
    
    top--;

}


bool isempty()
{
    if(top == -1)
    {
        return true;
    }
    return false;
}

bool IsRightAssociative(char op)
{
    if(op == '^')
    {
        return true;
    }
    
    return false;
}

int GetOperatorWeight(char op)
{
    int weight = -1;
    
    switch(op)
    {
        case '+':
        case '-':
        weight = 1;
        break;
        
        case '*':
        case '/':
        weight = 2;
        break;
        
        case '^':
        weight = 3;
        break;
        
    }
    
    return weight;
}

bool HasHigherPrecdence(char first, char second)
{
    int op1 = GetOperatorWeight(first);
    int op2 = GetOperatorWeight(second);
    
    if(op1 == op2)
    {
        if(IsRightAssociative(op1))
        {
            return true;
        }
        
        return false;
    }
    
    return op1>op2?true:false;
}

bool IsOpeningParenthesis(char op)
{
    if((op == '(') || (op == '[') || (op == '{'))
    {
        return true;
    }
    
    return false;
}

bool IsCloseingParenthesis(char op)
{
    if((op == ')') || (op == ']') || (op == '}'))
    {
        return true;
    }
    
    return false;
}

char* InFixtoPostFix(char* exp)
{
  static char res[30];
  
  int len = strlen(exp);
  
  int i;
  int j=0;
  
  for(i=0; i < len; i++)
  {
      if((exp[i] >= 65 && exp[i] <= 90) || (exp[i] >= 97 && exp[i] <= 122)) //ASCII value for alphabets
      {
         res[j] = exp[i];
         j++;
      }else if((exp[i] == 42) ||(exp[i] == 43) ||(exp[i] == 45) ||(exp[i] == 47) ||(exp[i] == 94)) //ASCII value of +,-,*,/,^
      {
          while((!isempty()) && (HasHigherPrecdence(A[top],exp[i])) && (!IsOpeningParenthesis(A[top])))
          {
              res[j] = A[top];
              j++;
              Pop();
          }
          Push(exp[i]);
      }else if(IsOpeningParenthesis(exp[i]))
      {
          Push(exp[i]);
      }else if(IsCloseingParenthesis(exp[i]))
      {
          while((!isempty()) && (!IsOpeningParenthesis(A[top])))
          {
              res[j] = A[top];
              j++;
              Pop();
          }
          Pop();
      }
     
  }
  
  while(!isempty())
  {
     res[j] = A[top];
     j++;
     Pop();
  }

   
   return res;
}


int main()
{
    char str[30];
    char* res;
    printf("enter the infex expression\n");
    scanf("%s",str);
    
    res = InFixtoPostFix(str);
    
    printf("the Postfix form is %s",res);
    
    return 0;
    
}
    
